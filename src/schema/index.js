const { makeExecutableSchema } = require("graphql-tools");
const resolvers = require("./resolvers");

// Define your types here.
const typeDefs = `
  type Spell {
    name: String
    school: String
    subschool: String
    descriptor: String
    spell_level: String
    casting_time: String
    components: String
    costly_components: Int,
    range: String
    area: String,
    effect: String
    targets: String,
    duration: String
    dismissible: Int
    shapeable: Int
    saving_throw: String
    spell_resistence: String
    description: String
    description_formated: String
    source: String
    full_text: String
    verbal: Int
    somatic: Int
    material: Int
    focus: Int
    divine_focus: Int
    sorcerer: Int
    wizard: Int
    cleric: Int
    druid: Int
    ranger: Int
    bard: Int
    paladin: Int
    alchemist: Int
    summoner: Int
    witch: Int
    inquisitor: Int
    oracle: Int
    antipaladin: Int
    magus: Int
    adept: Int
    deity: String,
    SLA_Level: Int
    domain: String
    short_description: String
    acid: Int
    air: Int
    chaotic: Int
    cold: Int
    curse: Int
    darkness: Int
    death: Int
    disease: Int
    earth: Int
    electricity: Int
    emotion: Int
    evil: Int
    fear: Int
    fire: Int
    force: Int
    good: Int
    language_dependent: String
    lawful: Int
    light: Int
    mind_affecting: Int
    pain: Int
    poison: Int
    shadow: Int
    sonic: Int
    water: Int
    linktext: String
    id: ID
    material_costs: String
    bloodline: String
    patron: String
    mythic_text: String
    augmented: String
    mythic: Int
    bloodrager: Int
    shaman: Int
    psychic: Int
    medium: Int
    mesmerist: Int
    occultist: Int
    spiritualist: Int
    skald: Int
    investigator: Int
    hunter: String
    haunt_statistics: String
    ruse: String
    draconic: String
    meditative: String
  }

  type Query {
    search(
      search: String
    ): [Spell!]!
    
    spells(
      class: String
      name: String
      school: String
      subschool: String
      descriptor: String
      spell_level: String
      casting_time: String
      components: String
      costly_components: Int,
      range: String
      area: String,
      effect: String
      targets: String,
      duration: String
      dismissible: Int
      shapeable: Int
      saving_throw: String
      spell_resistence: String
      description: String
      description_formated: String
      source: String
      full_text: String
      verbal: Int
      somatic: Int
      material: Int
      focus: Int
      divine_focus: Int
      sorcerer: Int
      wizard: Int
      cleric: Int
      druid: Int
      ranger: Int
      bard: Int
      paladin: Int
      alchemist: Int
      summoner: Int
      witch: Int
      inquisitor: Int
      oracle: Int
      antipaladin: Int
      magus: Int
      adept: Int
      deity: String,
      SLA_Level: Int
      domain: String
      short_description: String
      acid: Int
      air: Int
      chaotic: Int
      cold: Int
      curse: Int
      darkness: Int
      death: Int
      disease: Int
      earth: Int
      electricity: Int
      emotion: Int
      evil: Int
      fear: Int
      fire: Int
      force: Int
      good: Int
      language_dependent: String
      lawful: Int
      light: Int
      mind_affecting: Int
      pain: Int
      poison: Int
      shadow: Int
      sonic: Int
      water: Int
      linktext: String
      id: ID
      material_costs: String
      bloodline: String
      patron: String
      mythic_text: String
      augmented: String
      mythic: Int
      bloodrager: Int
      shaman: Int
      psychic: Int
      medium: Int
      mesmerist: Int
      occultist: Int
      spiritualist: Int
      skald: Int
      investigator: Int
      hunter: String
      haunt_statistics: String
      ruse: String
      draconic: String
      meditative: String
    ): [Spell!]!
  }
`;

// Generate the schema object from your types definition.
module.exports = makeExecutableSchema({ typeDefs, resolvers });
